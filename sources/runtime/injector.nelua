##[[

local lfs = require 'lfs'
local fs = require 'nelua.utils.fs'



local function extend_path(o, v, e)
	o.path = o.path .. ";" .. fs.join(v, "?." .. e)
	o.path = o.path .. ";" .. fs.join(v, "?/init." .. e)
end



local build_cfgs = {}
local status, pkg_cfg = pcall(dofile, 'package.lua')

static_assert(status, "Failed to load the package's configuration: " .. tostring(pkg_cfg))

config.path = config.path .. ";./ppm_cache/?.nelua"

if fs.isdir("ppm_cache") then
	for name in lfs.dir('ppm_cache') do
		if name:sub(1,1) ~= "." then
			local folder = fs.join('ppm_cache', name)

			IN_BUILD = true
			local status, pkg = pcall(dofile, fs.join(folder, 'package.lua'))
			IN_BUILD = nil

			static_assert(status, "Failed to load the configuration file of '" .. name .. "': " .. tostring(pkg))


			local build_cfg = pkg.build_cfg

			if pkg.src_dir ~= "" then
				extend_path(config, fs.join(".", folder, pkg.src_dir), "nelua")
			end

			if pkg.meta_dir ~= "" then
				extend_path(package, fs.join(".", folder, pkg.meta_dir), "lua")
			end

			if build_cfg ~= "" then
				local import_path = folder .. "/" .. build_cfg:sub(1, -7)
				import_path = import_path:gsub("/", ".")
				table.insert(build_cfgs, import_path)
			end
		end
	end
end

if pkg_cfg.src_dir ~= "" then
	extend_path(config, fs.join(".", pkg_cfg.src_dir), "nelua")
end

if pkg_cfg.meta_dir ~= "" then
	extend_path(config, fs.join(".", pkg_cfg.meta_dir), "lua")
end

if pkg_cfg.build_cfg ~= "" then
	local import_path = pkg_cfg.build_cfg:sub(1, -7):gsub("/", ".")
	table.insert(build_cfgs, import_path)
end

PPM_SUB_PACKAGE = true
for i, ip in ipairs(build_cfgs) do
	if i == #build_cfgs then
		PPM_SUB_PACKAGE = false
	end

	inject_astnode(
		aster.Call{{aster.String{ip}}, aster.Id{"require"}}
	)
end


]]